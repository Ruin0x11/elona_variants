#!/usr/bin/env ruby

require "date"
require "yaml"
require "nokogiri"
require "pandoc-ruby"

require_relative "../lib/elona_variants"

@variants = ElonaVariants.load(File.join(__dir__, "../data/variants.yml"))

@details = ElonaVariants.load_details(File.join(__dir__, "../data/details.yml"))

@lookup = {}
@variants.each do |variant|
  @lookup[variant.name] = variant
end

def github_raw_link(file)
  "https://raw.githubusercontent.com/Ruin0x11/elona_variants/master/#{file}"
end

def format_date(date)
  date.strftime("%m/%d/%Y")
end

def write_info(doc)
  latest_date = @variants.filter_map { |v| v.last_updated }.max

  doc.h1 "Elona Variants"

  doc.p do
    doc.text "This page will attempt to collect the major features of each variant of Elona in one place. This is to better understand what features across all the variants could be ported OpenNefia using its mod system, without having to constantly jump between various wikis and changelogs."
  end

  doc.p do
    doc.text "Because each variant has so many changes, it's probably impractical to list them all here. For now I'll focus on the features that seem to have the most importance to people. For the same reason, this list excludes things like added spells or items."
  end

  doc.p do
    doc.text "Each variant could also have a mod identifier associated with it. In OpenNefia, we could implement \"modpacks\" by simply creating an empty mod that specifies a bunch of related mods as dependencies."
  end

  doc.p do
    doc.text "This page was autogenerated from data at the repository "

    doc.a(href: "https://github.com/Ruin0x11/elona_variants") do
      doc.text "Ruin0x11/elona_variants"
    end

    doc.text ". The dates are current as of #{format_date(latest_date)}. If there's a feature you want to see a mod created for, feel free to open a pull request that adds it there."
  end
end

def write_variant_table(doc)
  doc.h1 "Table of Variants"

  doc.table do
    doc.thead do
      doc.tr do
        doc.th { doc.text "Name" }
        doc.th { doc.text "Full Name" }
        doc.th { doc.text "Created on" }
        doc.th { doc.text "Last updated" }
        doc.th { doc.text "Latest version" }
        doc.th { doc.text "Derived from" }
        doc.th { doc.text "Webpage" }
        doc.th { doc.text "Wikia" }
      end
    end
    doc.tbody do
      @variants.each do |variant|
        doc.tr do
          doc.th do
            if @details[variant.name]
              doc.a(href: "##{variant.name}") { doc.text variant.name }
            else
              doc.text variant.name
            end
          end

          doc.th do
            if variant.long_name
              doc.text variant.long_name
            end
          end

          doc.th do
            if variant.created_on
              doc.text format_date(variant.created_on)
            end
          end

          doc.th do
            if variant.last_updated
              doc.text format_date(variant.last_updated)
            end
          end

          doc.th do
            doc.text variant.latest_version
          end

          doc.th do
            if variant.derived_from
              doc.text @lookup[variant.derived_from[:name]].name
            end
          end

          doc.th do
            if variant.webpage
              doc.a(href: variant.webpage) { doc.text "Link" }
            end
          end

          doc.th do
            if variant.wikia_link
              doc.a(href: variant.wikia_link) { doc.text "Link" }
            end
          end
        end
      end
    end
  end
end

def write_variant_lineage(doc)
  doc.h1 "Lineage of Variants"

  doc.text "Click "
  doc.a(href: github_raw_link("data/lineage.svg")) do
    doc.text "here"
  end
  doc.text " for a graph showing the release history of each variant."
end

def write_variant_features(doc)
  doc.h1 "Variant Features"

  @details.each do |variant_name, detail|
    doc.h2 variant_name

    if detail.desc
      doc.text detail.desc
    end

    doc.table do
      doc.thead do
        doc.tr do
          doc.th { doc.text "Name" }
          doc.th { doc.text "Description" }
          doc.th { doc.text "Added In" }
          doc.th { doc.text "Links" }
          doc.th { doc.text "Images" }
        end
      end
      doc.tbody do
        detail.features.each do |feature|
          doc.tr do
            doc.th do
              doc.text feature[:name]
            end

            doc.th do
              doc.text feature[:desc]
            end

            doc.th do
              if feature[:added_in]
                doc.text feature[:added_in]
              end
            end

            doc.th do
              feature[:links].each_with_index do |link, index|
                doc.a(href: link) { doc.text "[#{index+1}]"}
                doc.text " "
              end
            end

            doc.th do
              feature[:images].each_with_index do |image, index|
                doc.a(href: image) { doc.text "[#{index+1}]"}
                doc.text " "
              end
            end
          end
        end
      end
    end
  end
end

def write_body(doc)
  write_info(doc)
  write_variant_table(doc)
  write_variant_lineage(doc)
  write_variant_features(doc)
end

builder = Nokogiri::HTML::Builder.new do |doc|
  doc.html do
    doc.body do
      write_body(doc)
    end
  end
end

html = builder.to_html
markdown = PandocRuby.convert(html, { from: :html, to: :gfm }, "--wrap=none")

puts markdown
